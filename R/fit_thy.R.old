#' @title Do a maximum likelihood fit for theta_y
#'
#' @description \code{fit_thy} does a maximum likelihood fit for theta_y
#'
#' @details
#'
#' x is a vector of length n and Y is a matrix of size (J+K) by N, where J is
#' the number of ordinal observations and K the number of continuous
#' observations. modSpec, which stands for model specification, specifies the
#' model. In particular, it is a list with the following fields:
#'
#' J          Number of ordinal observations
#' K          Number of continuous observations
#' M          Number of ordinal categories for each ordinal variable (a vector
#'            of length J)
#' meanSpec   Specification of the parametetric form of the mean response.
#'            Currently, only powLaw, for power law, is supported.
#' hetSpec    Heteroskedasticity specification. Currently, only none (yielding
#'            a homoskedastic model) and linearSd (in which the noise standard
#'            deviation scales linearly with x) are supported. For linearSd,
#'            the variable hetGroups must also be specified.
#' hetGroups  The groups for the heteroskedastic parameters (kappa). A vector
#'            of length J+K. Each variable must be assigned a unique group 
#'            between 1 and G_kappa. NA can be used in the vector to set
#'            specific variables to be homoskedastic. Only required if hetSpec
#'            is linearSd.
#' cdepSpec   Conditional dependence specification, which equals either indep
#'            (for independent) or dep (for dependent). For dep, the variable
#'            cdepGroups must be specified.
#' cdepGroups The groups for the correlation terms for a conditional dependence
#'            setting of dep. A vector of length J+K. Each variable must be
#'            assigned a unique group between 1 and G_rho. NA can be used in
#'            the vector to set specific variables to be conditionally
#'            independent. A vector of all NAs is equivalent to cdepSpec=indep.
#'            Only required if cdepSpec is dep.
#'
#' @param x Vector of indepenent variable observations
#' @param Y Matrix of dependent variable observations
#' @param modSpec A list specifying the model to use
#'
# @keywords
#' @export
#'
#' @return The log-likelihood
#'
#' @author Michael Holton Price <MichaelHoltonPrice@gmail.com>

#' @export
fit_thy <- function(x,Y,modSpec) {
  '%dopar%' <- foreach::'%dopar%'
  integInfo <- getIntegInfo_theta_y(theta_y_list,Y)
  if(is.matrix(Y)) {
    # For more than one variable, call calcLogLik_theta_y for each observation in parallel
    logLikVect <- foreach::foreach(n=1:ncol(Y), .combine=cbind) %dopar% {
      logLik <- calcLogLik_theta_y(theta_y_list,x[n],Y[,n],hp)
    }
    return(sum(logLikVect))
  } else {
    # The calculation for one observation
    if('kappa' %in% names(theta_y_list)) {
      # using correlations
      covMat <- (1+theta_y_list$kappa*x)^2 * theta_y_list$Sigma
    } else {
      # not using correlations
      covMat <- theta_y_list$Sigma
    }
    intAll <- all(integInfo$doIntegral)
    # If all variables are integrated, the conditional calculations are not needed
    if(intAll) {
      lo <- integInfo$limArray[,1]
      hi <- integInfo$limArray[,2]
      p <- mvtnorm::pmvnorm(lower=lo, upper=hi,mean=calc_theta_y_means(x,theta_y_list),sigma=covMat)
      logLik <- log(as.numeric(p))
    } else {
      dep <- which(integInfo$doIntegral) # dep for dependent (conditioned on known variables)
      giv <- which(!integInfo$doIntegral) # giv for given (variables conditioned on)
      lo <- integInfo$limArray[dep,1]
      hi <- integInfo$limArray[dep,2]
      if(length(dep) > 0) {
        # Integral needed
        #condNorm <- condMVNorm::condMVN(mean=calc_theta_y_means(x,theta_y_list),sigma=covMat, dependent=dep, given=giv,X.given=Y[giv])
        condNorm <- condMVNorm::condMVN(mean=calc_theta_y_means(x,theta_y_list),sigma=covMat, dependent=dep, given=giv,X.given=Y[giv],check.sigma=F)
        p <- mvtnorm::pmvnorm(lower=lo, upper=hi,mean=condNorm$condMean,sigma=condNorm$condVar) # The integral
        logLik <- log(as.numeric(p))
      } else {
        # No integral needed
        logLik <- 0
      }

      if(length(giv) == 1) { # The contribution of the point calculation integral
        logLik <- logLik + log(dnorm(Y[giv],mean=calc_theta_y_means(x,theta_y_list,giv),sd=sqrt(covMat[giv,giv])))
      } else {
        logLik <- logLik + mvtnorm::dmvnorm(Y[giv],mean=calc_theta_y_means(x,theta_y_list,giv),sigma=covMat[giv,giv],log=T)
      }
    }
    return(logLik)
  }
}

# A wrapper function to calculate the mean for each variable
calc_theta_y_means <- function(xScalar,theta_y_list,giv=NA) {
  haveOrd <- 'rho' %in% names(theta_y_list)
  haveCont <- 'r' %in% names(theta_y_list)
  check_model(theta_y_list$paramModel)

  if(haveOrd) {
    rho <- theta_y_list$rho
  }

  if(haveCont) {
    a <- theta_y_list$a
    r <- theta_y_list$r
    b <- theta_y_list$b
  }

  if(!any(is.na(giv))) {
    if(haveOrd && haveCont) {
      J <- length(rho)
      givOrd  <- giv[giv <= J]
      givCont <- giv[giv > J]
      rho <- rho[givOrd]
      a <- a[givCont-J]
      r <- r[givCont-J]
      b <- b[givCont-J]
    } else if(haveOrd && !haveCont) {
      givOrd  <- giv
      rho <- rho[givOrd]
    } else {
      # !haveOrd && haveCont
      givCont  <- giv
      a <- a[givCont]
      r <- r[givCont]
      b <- b[givCont]
    }
  }
  if(haveOrd && haveCont) {
    meanVectOrd  <- xScalar^rho
    meanVectCont <- a*xScalar^r + b
    return(c(meanVectOrd,meanVectCont))
  } else if(haveOrd && !haveCont) {
    meanVectOrd  <- xScalar^rho
    return(meanVectOrd)
  } else {
    # !haveOrd && haveCont
    meanVectCont <- a*xScalar^r + b
    return(meanVectCont)
  }

}
